cmake_minimum_required (VERSION 2.8.12.1)
PROJECT(cvPclGrabber)


SET(MY_DIR ${cvPclGrabber_SOURCE_DIR})
SET(DEPENDS_DIR "${MY_DIR}/../../../depends" CACHE STRING "Dependency directory")

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native")
SET(CMAKE_BUILD_TYPE  Release)
#IF(UNIX AND NOT APPLE)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fexceptions")
#ENDIF()

# SET( CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake_modules")
# SET( INCLUDE "${CMAKE_SOURCE_DIR}/include")

MESSAGE(STATUS "MY_DIR: " ${MY_DIR})

FIND_PACKAGE(PkgConfig)    # try find PKGConfig as it will be used if found
# LIST(APPEND CMAKE_MODULE_PATH ${MY_DIR}/cmake_modules) # FindGLFW3.cmake

IF(TARGET freenect2)
  MESSAGE(STATUS "Using in-tree freenect2 target")
  SET(freenect2_LIBRARIES freenect2)
ELSE()
  FIND_PACKAGE(freenect2 REQUIRED)
ENDIF()

INCLUDE_DIRECTORIES(${freenect2_INCLUDE_DIR})

OPTION(WITH_SERIALIZATION "adds support for boost serialization" ON)
IF(${WITH_SERIALIZATION})
	FIND_PACKAGE(Boost REQUIRED)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_SERIALIZATION")
	SET(BOOST_LIBS "boost_serialization")
ENDIF()

OPTION(WITH_PCL "adds pcl cloud support" ON)
if(${WITH_PCL})
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_PCL")
	FIND_PACKAGE(PCL REQUIRED)
	INCLUDE_DIRECTORIES(${PCL_INCLUDE_DIRS})
endif()

FIND_PACKAGE(OpenCV REQUIRED)
INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${FREENECT2_INCLUDE_DIRS})

ADD_EXECUTABLE(Kinect2Grabber src/test.cpp)
TARGET_LINK_LIBRARIES(Kinect2Grabber ${OpenCV_LIBS} ${freenect2_LIBRARIES} ${PCL_LIBRARIES} ${BOOST_LIBS})

ADD_EXECUTABLE(MultiKinect2Grabber src/multi_test.cpp)
TARGET_LINK_LIBRARIES(MultiKinect2Grabber ${OpenCV_LIBS} ${freenect2_LIBRARIES} ${PCL_LIBRARIES} ${BOOST_LIBS})

